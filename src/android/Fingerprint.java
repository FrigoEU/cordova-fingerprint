package com.caresolutions.cordova.fingerprint;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.fgtit.fpcore.FPMatch;
import com.fgtit.data.Conversions;

public class Fingerprint extends CordovaPlugin {
  public Fingerprint () {
  }

  public static byte[] toBytes(int... ints) { // helper function
    byte[] result = new byte[ints.length];
    for (int i = 0; i < ints.length; i++) {
      result[i] = (byte) ints[i];
    }
    return result;
  }

  @Override
  public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
    if ("test".equals(action)) {
      byte[] index = Fingerprint.toBytes(3,1,92,24,137,0,192,6,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,6,158,222,16,14,200,94,100,22,100,158,102,27,229,30,66,31,228,158,32,162,233,254,53,169,168,62,95,51,82,126,41,179,214,126,100,135,226,87,81,13,33,223,41,14,31,127,70,15,33,159,28,146,30,191,89,146,35,95,16,159,3,87,67,167,102,191,87,43,167,127,49,57,42,191,74,186,169,95,65,60,212,95,32,27,229,189,25,25,222,248,28,23,96,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,94,24,138,0,128,6,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,4,95,54,45,6,158,254,100,22,100,158,102,27,165,94,66,159,164,94,32,162,233,254,95,51,82,94,40,179,150,94,101,7,161,247,81,141,33,127,41,142,31,31,70,143,97,63,89,145,227,95,29,18,30,127,16,159,66,247,67,167,102,191,51,41,40,159,87,171,103,127,49,57,42,191,74,186,169,95,65,188,212,127,32,155,229,125,25,25,158,120,28,23,96,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
      byte[] middle = Fingerprint.toBytes( 3, 1, 79, 36, 125, 0, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 64, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 138, 98, 126, 91, 144, 162, 62, 20, 17, 34, 94, 45, 166, 218, 94, 73, 55, 168, 254, 44, 59, 107, 30, 50, 64, 42, 158, 108, 65, 103, 94, 35, 194, 151, 254, 67, 66, 234, 94, 43, 13, 102, 63, 79, 17, 160, 255, 97, 147, 227, 223, 46, 150, 229, 95, 32, 23, 98, 191, 71, 26, 226, 63, 73, 169, 102, 191, 77, 173, 103, 127, 27, 45, 219, 63, 39, 180, 151, 159, 88, 183, 210, 127, 61, 61, 212, 191, 89, 133, 161, 220, 83, 7, 224, 29, 83, 158, 100, 29, 89, 160, 207, 125, 64, 33, 81, 221, 26, 181, 132, 82, 57, 171, 148, 187, 57, 174, 168, 123, 57, 137, 193, 25, 31, 55, 25, 179, 68, 9, 215, 118, 63, 151, 13, 214, 52, 34, 26, 119, 72, 143, 29, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 80, 36, 126, 0, 128, 6, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 17, 34, 62, 45, 166, 218, 94, 73, 55, 168, 254, 88, 184, 210, 126, 44, 59, 107, 30, 50, 64, 42, 158, 108, 65, 103, 94, 35, 66, 151, 254, 67, 66, 234, 94, 104, 139, 34, 223, 43, 13, 102, 63, 79, 17, 160, 255, 46, 150, 229, 63, 32, 23, 98, 191, 71, 26, 226, 95, 73, 169, 102, 191, 78, 172, 231, 95, 27, 45, 219, 63, 39, 180, 151, 191, 61, 61, 212, 191, 89, 133, 161, 220, 68, 9, 215, 188, 83, 7, 223, 253, 93, 16, 226, 93, 97, 147, 227, 189, 83, 158, 100, 29, 89, 160, 207, 125, 64, 33, 81, 221, 71, 14, 156, 26, 57, 171, 148, 187, 57, 174, 104, 155, 58, 9, 129, 121, 63, 151, 13, 214, 52, 34, 26, 119, 58, 140, 133, 149, 59, 142, 144, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );
      byte[] index2 = Fingerprint.toBytes( 3, 1, 82, 26, 129, 0, 224, 6, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 4, 2, 254, 81, 141, 158, 94, 72, 16, 30, 30, 36, 147, 194, 30, 93, 41, 100, 126, 60, 172, 169, 190, 81, 51, 39, 254, 66, 188, 150, 190, 92, 9, 9, 223, 41, 9, 215, 127, 107, 22, 33, 159, 69, 23, 94, 255, 96, 152, 161, 95, 24, 155, 164, 127, 57, 27, 222, 159, 44, 168, 195, 63, 94, 176, 230, 159, 35, 52, 27, 95, 22, 56, 155, 95, 74, 66, 43, 63, 44, 152, 200, 154, 41, 27, 9, 59, 43, 143, 85, 89, 43, 17, 82, 118, 56, 33, 32, 209, 60, 37, 229, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 80, 25, 129, 0, 192, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 141, 158, 94, 36, 147, 194, 30, 93, 41, 100, 126, 60, 44, 169, 222, 81, 51, 39, 254, 66, 188, 150, 190, 33, 133, 2, 223, 92, 9, 9, 191, 41, 9, 215, 127, 70, 144, 158, 31, 107, 22, 33, 159, 69, 23, 94, 255, 96, 152, 161, 127, 25, 27, 164, 63, 57, 27, 222, 159, 45, 41, 2, 255, 94, 176, 230, 159, 35, 180, 27, 31, 22, 56, 155, 95, 73, 194, 43, 95, 44, 152, 200, 122, 41, 155, 9, 155, 43, 143, 85, 121, 43, 17, 82, 118, 60, 37, 165, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );
      byte[] middle2 = Fingerprint.toBytes( 3, 1, 82, 35, 125, 0, 128, 6, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 192, 2, 56, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 9, 99, 190, 86, 14, 162, 254, 38, 35, 26, 158, 47, 39, 213, 222, 49, 172, 40, 222, 63, 52, 233, 94, 22, 62, 87, 254, 55, 63, 170, 190, 80, 5, 160, 183, 66, 135, 89, 223, 39, 9, 166, 223, 74, 15, 33, 159, 105, 16, 37, 127, 91, 146, 100, 159, 26, 147, 35, 63, 41, 19, 101, 191, 104, 22, 101, 223, 65, 24, 98, 191, 57, 30, 146, 127, 79, 183, 147, 127, 31, 56, 107, 255, 49, 58, 149, 31, 35, 61, 107, 159, 92, 190, 41, 127, 67, 39, 102, 252, 68, 12, 94, 189, 55, 17, 78, 125, 75, 156, 228, 221, 82, 31, 15, 221, 68, 170, 231, 221, 24, 173, 149, 125, 29, 48, 152, 125, 58, 20, 78, 186, 53, 134, 129, 215, 45, 152, 100, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 82, 35, 125, 0, 128, 6, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 128, 2, 192, 2, 56, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 9, 99, 158, 86, 14, 162, 254, 38, 35, 26, 158, 67, 166, 231, 62, 63, 52, 233, 94, 23, 62, 87, 190, 54, 63, 170, 254, 80, 5, 160, 183, 66, 135, 89, 223, 39, 9, 166, 223, 74, 15, 33, 159, 105, 16, 37, 127, 91, 146, 100, 159, 26, 147, 35, 63, 41, 19, 101, 223, 103, 150, 102, 31, 65, 24, 98, 191, 75, 156, 228, 223, 57, 30, 146, 127, 82, 31, 80, 31, 68, 170, 231, 223, 29, 48, 152, 127, 79, 183, 147, 127, 31, 56, 107, 255, 49, 58, 149, 31, 35, 189, 171, 31, 92, 190, 41, 127, 49, 172, 40, 220, 68, 12, 94, 189, 55, 17, 14, 93, 49, 40, 85, 61, 58, 20, 78, 186, 54, 6, 129, 215, 45, 152, 100, 109, 49, 27, 101, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

      FPMatch fp = FPMatch.getInstance();
      Conversions conv = Conversions.getInstance();

      fp.InitMatch();

      byte[] index_iso = new byte[512];
      conv.StdToIso(2, index, index_iso);
      byte[] index2_iso = new byte[512];
      conv.StdToIso(2, index2, index2_iso);
      byte[] middle_iso = new byte[512];
      conv.StdToIso(2, middle, middle_iso);
      byte[] middle2_iso = new byte[512];
      conv.StdToIso(2, middle2, middle2_iso);

      int res1 = fp.MatchTemplate(index_iso, index2_iso);
      int res2 = fp.MatchTemplate(index_iso, middle_iso);
      int res3 = fp.MatchTemplate(index_iso, index_iso);
      String message = "returning: " + args.getString(0) + " " + Integer.toString(res1) + " " + Integer.toString(res2) + " " + Integer.toString(res3);
      callbackContext.success(message);
      return true;
    }
    // callbackContext.error("I only know the 'test' action!");
    return false;  // Returning false results in a "MethodNotFound" error.
  }
}

